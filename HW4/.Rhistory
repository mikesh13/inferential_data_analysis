survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
survey <- survey %>% rename(Age = How.old.are.you., Who = Are.you., House = Do.you.rent.or.own.your.current.living.space., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home., Spend = In.the.past.7.days..how.much.did.you.spend.on.Uber.Lyft.or.other.ride.hailing.apps..in.US.dollars.., Rides = In.the.past.7.days..how.many.rides.did.you.hail.using.an.Uber.Lyft.app.., Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable., Frustration = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.am.often.frustrated.with.Seattle.traffic.)
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student') %>% drop_na(Who, House, Tmode, Transportation, Frustration)
survey <- survey %>% mutate(Test = case_when(survey$Frustration %in% c('Somewhat agree', 'Strong agree') ~ "Yes", survey$Frustration %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Frustration %in% 'Neither agree nor disagree' ~ "Neutral"))
survey$Test
survey$Frustration
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
survey <- survey %>% rename(Age = How.old.are.you., Who = Are.you., House = Do.you.rent.or.own.your.current.living.space., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home., Spend = In.the.past.7.days..how.much.did.you.spend.on.Uber.Lyft.or.other.ride.hailing.apps..in.US.dollars.., Rides = In.the.past.7.days..how.many.rides.did.you.hail.using.an.Uber.Lyft.app.., Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable., Frustration = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.am.often.frustrated.with.Seattle.traffic.)
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student') %>% drop_na(Who, House, Tmode, Transportation, Frustration)
survey <- survey %>% mutate(Housing = ifelse(survey$House == 'Rent', "Rent", "Others"), Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), Reliable = case_when(survey$Transportation %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Transportation %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Transportation %in% 'Neither agree nor disagree' ~ "Neutral"), IsFrustrated = case_when(survey$Frustration %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Frustration %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Frustration %in% 'Neither agree nor disagree' ~ "Neutral"))
Test <- lm(CommuteTime ~ Age + Housing + Traffics + Reliable, data = survey)
summary(Test)
Test <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Reliable, data = survey)
summary(Test)
library(tidyverse)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
survey <- survey %>% rename(Age = How.old.are.you., Who = Are.you., House = Do.you.rent.or.own.your.current.living.space., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home., Spend = In.the.past.7.days..how.much.did.you.spend.on.Uber.Lyft.or.other.ride.hailing.apps..in.US.dollars.., Rides = In.the.past.7.days..how.many.rides.did.you.hail.using.an.Uber.Lyft.app.., Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable., Frustration = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.am.often.frustrated.with.Seattle.traffic.)
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student') %>% drop_na(Who, House, Tmode, Transportation, Frustration)
survey <- survey %>% mutate(Housing = ifelse(survey$House == 'Rent', "Rent", "Others"), Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), Reliable = case_when(survey$Transportation %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Transportation %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Transportation %in% 'Neither agree nor disagree' ~ "Neutral"), IsFrustrated = case_when(survey$Frustration %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Frustration %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Frustration %in% 'Neither agree nor disagree' ~ "Neutral"), AgeSq = Age^2)
Test <- lm(CommuteTime ~ AgeSq + IsFrustrated + Traffics + Reliable, data = survey)
summary(Test)
Test <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Reliable, data = survey)
summary(Test)
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Reliable, data = survey)
summary(LB_HW4)
par(mfrow = c(2, 2))
plot(LB_HW4)
LB_HW4_reduced <- step(LB_HW4, direction = "backward", test = "F")
knitr::opts_chunk$set(echo = TRUE)
# Step 1 -> Read data into R workstation
#### Read data from a CSV file
#### Example: Alzheimer's Disease
# filename
# RCurl is the R package to read csv file using a link
library(RCurl)
install.packages(RCurl)
install.packages("RCurl")
install.packages("ggfortify")
knitr::opts_chunk$set(echo = TRUE)
# Step 1 -> Read data into R workstation
#### Read data from a CSV file
#### Example: Alzheimer's Disease
# filename
# RCurl is the R package to read csv file using a link
library(RCurl)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD2.csv"))
str(AD)
# Step 2 -> Data preprocessing
# Create your X matrix (predictors) and Y vector (outcome variable)
X <- AD[,1:15]
X
Y <- AD$MMSCORE
data <- data.frame(X,Y)
names(data)[16] <- c("MMSCORE")
# Create a training data (half the original data size)
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
data.train <- data[train.ix,]
# Create a testing data (half the original data size)
data.test <- data[-train.ix,]
# Step 3 -> Use lm() function to build a full model with all predictors
lm.AD <- lm(MMSCORE ~ ., data = data.train)
summary(lm.AD)
# Important knowledge point: 1) The use of lm() function, including the correct specification of the regression formula (e.g., MMSCORE ~ AGE + PTGENDER + PTEDUCAT + AGE*PTEDUCAT), arguments used in the lm() (help(lm)); 2) interpretation of the results, including the significant predictors, p-values, t-tests, and R-squares, etc,
# Step 4 -> use step() to automatically delete all the insignificant variables
# Automatic model selection
lm.AD.reduced <- step(lm.AD, direction="backward", test="F") # direction="backward" means we start with the full model, then sequentially remove insignificant variables. There are other options, including direction="forward" or direction="both" - see help(step).
anova(lm.AD.reduced,lm.AD) # anova(model1,model2) is to compare if the two models, model1 and model2, are statistically different. If not statistically different, we prefer the simpler model
# Step 5 -> Conduct diagnostics of the model
# install.packages("ggfortify")
require("ggfortify") # ggfortify is the package to do model diagnosis
autoplot(lm.AD.reduced, which = 1:6, ncol = 3, label.size = 3)
# This R function generates six figures:
# 1) the left figure in the first row, which is the scatterplot of the residuals versus fitted values of the outcome variable, it is supposed to show purely random distributions of the data points. In other words, any pattern that shows non-random characteristics, such as the curved relationship between the residuals and fitted values, and the unusual parallel lines of the data points, indicates deviance from the assumptions such as independence of the observations and constancy/homoscedasticity of the variance of the errors.
# 2) The Q-Q plot, as the middle figure in the first row, shows violation of the normality assumption of the error term. And some particularly violating data points such as the data points 282 and 256 are labelled.
# 3) The right figure in the first row, is a re-presentation of the figure in 1). As diagnostic figures are opportunistic efforts to identify problems (like doctors to see patients), seeing no problem usually doesn't mean really no problem. Thus, it is helpful to present the same information in multiple scales.
# 4) The Cook's distance shown in the left figure in the second row, shows the influential data points that have larger than average influence on the parameter estimation. The Cook's distance of a data point is built on the idea of how much change will be induced on the estimated parameters if the data point is deleted.
# 5) The leverage of a data point, on the other hand, shows the influence of the data point in another way. Mathematically, the leverage of a data point is (???y ^_i)/(???y_i ), reflecting how sensitive the prediction on the data point by the model is decided by the observed outcome value y_i. In other words, what data point will result in high leverage value? For data points that are surrounded by many close-by data points, their leverages won't be large, since the impact of removal of them will be compensated by other similar data points in the nearby. Thus, we could infer that the data points that sparsely occupy their neighbor areas will have large leverages. These data points could either be outliers that severely derivate from the linear trend represented by the majority of the data points, or could be valuable data points that align with the linear trend but lack neighbor data points, and thus, changes on their observations will generate a large impact on the predictions on the data points nearby their locations. Thus, it is important to note that, a data point that is influential doesn't necessary imply that it is bad. It only suggests that some more in-depth examination of the data point is needed.
# 6) Again, the last figure, as the 3) one, is to re-present the information in 4) and 5)
# Step 6 -> Predict using your linear regession model
pred.lm <- predict(lm.AD.reduced, data.test) # a few comments: 1) predict() is a function that you can find in many R pacakges. R package developers tend to agree to write such a function predict(obj, data), where obj is the obj of the created model by that package, and data is the data points you want to predict on. 2) While in many cases this is not needed, sometimes you do need to specify the argument "type". Here, type="class" means that, you specify this is a classification problem.
cor(pred.lm, data.test$MMSCORE) #For regression model, you can use correlation to measure how close your predictions with the true outcome values of the data points
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Reliable + Housing, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Reliable, data = survey)
summary(LB_HW4)
sum(survey$Rides >= 1)
sum(survey$Rides >= 0)
str(survey)
str(survey$Rides)
sum(survey$Rides != NA)
nrow(survey$Rides >= 0)
sum(survey$Rides >= 0)
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members. == 'No')
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members. == 'Yes')
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
survey <- survey %>% mutate(DL_Time = How.old.are.you. - How.old.were.you.when.you.got.your.driver.s.license.)
survey <- survey %>% filter(DL_Time >= 0)
summary(survey$DL_Time)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>% rename(Age = How.old.are.you., Who = Are.you., House = Do.you.rent.or.own.your.current.living.space., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home., Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable., Frustration = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.am.often.frustrated.with.Seattle.traffic., Weather = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.choose.my.mode.of.transport.based.on.weather., Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus.)
#Filter the dataset to clear out missing and meaningless data.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student') %>% drop_na(Who, House, Tmode, Transportation, Frustration, Weather, Days)
#Transform the variables into the way I wnat to put in my regression model.
survey <- survey %>%
mutate(Housing = ifelse(survey$House == 'Rent', "Rent", "Others"), Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), Reliable = case_when(survey$Transportation %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Transportation %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Transportation %in% 'Neither agree nor disagree' ~ "Neutral")) %>%
mutate( IsFrustrated = case_when(survey$Frustration %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Frustration %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Frustration %in% 'Neither agree nor disagree' ~ "Neutral"), AgeSq = Age^2) %>%
mutate(Frequency = ifelse(grepl('Every', survey$Days), "Yes", "No"))
nrow(survey)
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Reliable + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + Weather + Traffics + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + Reliable + Traffics + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + Who + Traffics + Frequency, data = survey)
LB_HW4 <- lm(CommuteTime ~ Age + Housing + Traffics + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + Frustration + Traffics + Frequency, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Frequency, data = survey)
summary(LB_HW4)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>% rename(Age = How.old.are.you., Who = Are.you., House = Do.you.rent.or.own.your.current.living.space., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home., Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable., Frustration = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.am.often.frustrated.with.Seattle.traffic., Weather = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...I.choose.my.mode.of.transport.based.on.weather., Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps.)
#Filter the dataset to clear out missing and meaningless data.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student') %>% drop_na(Who, House, Tmode, Transportation, Frustration, Weather, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
survey <- survey %>%
mutate(Housing = ifelse(survey$House == 'Rent', "Rent", "Others"), Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), Reliable = case_when(survey$Transportation %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Transportation %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Transportation %in% 'Neither agree nor disagree' ~ "Neutral")) %>%
mutate( IsFrustrated = case_when(survey$Frustration %in% c('Somewhat agree', 'Strongly agree') ~ "Yes", survey$Frustration %in% c('Somewhat disagree', 'Strongly disagree') ~ "No", survey$Frustration %in% 'Neither agree nor disagree' ~ "Neutral"), AgeSq = Age^2) %>%
mutate(Frequency = ifelse(grepl('Every', survey$Days), "Yes", "No"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"))
LB_HW4 <- lm(CommuteTime ~ Age + IsFrustrated + Traffics + Frequency + ShareRide, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide, data = survey)
summary(LB_HW4)
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members.==TRUE)
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members.= TRUE)
is.na(survey$Do.you.live.with.a.significant.other.or.other.family.members.)
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members.== 'Yes')
sum(survey$Do.you.live.with.a.significant.other.or.other.family.members.== 'No')
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus.) %>%
rename(ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Frustration, Weather, Days, ShareRide)
#Filter the dataset to clear out missing and meaningless data.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelsxe(survey$ShareRide > 0, "Yes", "No"))
#Transform the variables into the way I wnat to put in my regression model.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"))
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No'), Gender %in% c('Male', 'Female')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"))
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse + Gender, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ AgeSq + Traffics + Frequency + ShareRide + ShareHouse + Gender, data = survey)
summary(LB_HW4)
LB_HW4 <- lm(CommuteTime ~ AgeSq + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTime ~ AgeSq + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
confit(LB_HW4)
confint(LB_HW4)
install.packages(c("sjPlot", "sjlabelled", "sjmisc"))
library(sjPlot)
library(sjlabelled)
library(sjmisc)
plot_model(LB_HW4)
LB_HW4.2 <- lm(CommuteTime ~ Traffic + ShareHouse + ShareRide, data = survey)
LB_HW4.2 <- lm(CommuteTime ~ Traffics + ShareHouse + ShareRide, data = survey)
summary(LB_HW4.2)
LB_HW4.2 <- lm(CommuteTime ~ Traffics + ShareHouse, data = survey)
summary(LB_HW4.2)
# Step 1 -> Read data into R workstation
#### Read data from a CSV file
#### Example: Alzheimer's Disease
# filename
# RCurl is the R package to read csv file using a link
library(RCurl)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD2.csv"))
str(AD)
# Step 2 -> Data preprocessing
# Create your X matrix (predictors) and Y vector (outcome variable)
X <- AD[,1:15]
X
Y <- AD$MMSCORE
data <- data.frame(X,Y)
names(data)[16] <- c("MMSCORE")
# Create a training data (half the original data size)
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
data.train <- data[train.ix,]
# Create a testing data (half the original data size)
data.test <- data[-train.ix,]
# Step 3 -> Use lm() function to build a full model with all predictors
lm.AD <- lm(MMSCORE ~ ., data = data.train)
summary(lm.AD)
# Important knowledge point: 1) The use of lm() function, including the correct specification of the regression formula (e.g., MMSCORE ~ AGE + PTGENDER + PTEDUCAT + AGE*PTEDUCAT), arguments used in the lm() (help(lm)); 2) interpretation of the results, including the significant predictors, p-values, t-tests, and R-squares, etc,
library(ggfortify)
autoplot(LB_HW4, which = 1:6, ncol = 3, label.size = 3)
cor(survey$Traffics, survey$ShareRide)
cor(survey$CommuteTime, survey$Age)
str(LB_HW4)
vif <- 1/(1 - 0.18^2)
vif
vif(LB_Hw4)
library(car)
vif(LB_Hw4)
install.packages("car")
library(car)
vif(LB_Hw4)
vif(LB_HW4)
par(mfrow = c(2, 2))
plot(LB_HW4)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
#Traffics = Yes means primary means of commute is either buses or driving. Otherwise, no.
#Frequency = High means go on UW campus at least 5 days a week. Otherwise, low.
#ShareRide = Yes means taking Lyft/Uber at least once a week on average. Otherwise, no.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"), CommuteTime = CommuteTime^0.5)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTime ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(car)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
#Traffics = Yes means primary means of commute is either buses or driving. Otherwise, no.
#Frequency = High means go on UW campus at least 5 days a week. Otherwise, low.
#ShareRide = Yes means taking Lyft/Uber at least once a week on average. Otherwise, no.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"), CommuteTimeSqrt = CommuteTime^0.5)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
vif(LB_HW4)
par(mfrow = c(2, 2))
plot(LB_HW4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(car)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(ShareRide = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, ShareRide)
#Transform the variables into the way I wnat to put in my regression model.
#Traffics = Yes means primary means of commute is either buses or driving. Otherwise, no.
#Frequency = High means go on UW campus at least 5 days a week. Otherwise, low.
#ShareRide = Yes means taking Lyft/Uber at least once a week on average. Otherwise, no.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), ShareRide = ifelse(survey$ShareRide > 0, "Yes", "No"), CommuteTimeSqrt = CommuteTime^0.5, AgeSq = Age^2)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTimeSqrt ~ AgeSq + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
vif(LB_HW4)
par(mfrow = c(2, 2))
plot(LB_HW4)
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey)
summary(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
train.ix <- sample(nrow(survey), floor(nrow(survey)/2))
survey.train <- survey[train.ix,]
survey.test <- survey[-train.ix,]
#Put variables in Regression Model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey.train)
summary(LB_HW4)
predict.lm <- predict(LB_HW4, survey.test)
cor(predict.lm, survey.test$CommuteTime)
knitr::opts_chunk$set(echo = TRUE)
# Step 1 -> Read data into R workstation
#### Read data from a CSV file
#### Example: Alzheimer's Disease
# filename
# RCurl is the R package to read csv file using a link
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
str(data)
# Step 2 -> Data preprocessing
# Create your X matrix (predictors) and Y vector (outcome variable)
X <- data[,2:16]
Y <- data$DX_bl
# Make sure the outcome variable is legitimate. If it is a continuous variable (regression problem), it should be defined as a "num" variable in R. If it is a binary or a more genernal categorical variable (classification problem), it should be defined as a "factor" variable in R.
# Here, we focus on the binary outcome "DX_bl" (two classes: normal, diseases). The following code makes sure the variable "DX_bl" is a "factor".
Y <- paste0("c", Y) # This line is to "factorize" the variable "DX_bl". It denotes "0" as "c0" and "1" as "c1", to highlight the fact that "DX_bl" is a factor variable, not a numerical variable
Y <- as.factor(Y) # as.factor is to convert any variable into the format as "factor" variable.
# Then, we integrate everything into a data frame
data <- data.frame(X,Y)
names(data)[16] = c("DX_bl")
# Create a training data (half the original data size)
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
data.train <- data[train.ix,]
# Create a testing data (half the original data size)
data.test <- data[-train.ix,]
# Step 3 -> Use lm() function to build a full model with all predictors
logit.AD.full <- glm(DX_bl ~ ., data = data.train, family = "binomial")
summary(logit.AD.full)
# Important knowledge point: 1) The use of glm() function, including the correct specification of the regression formula (e.g., DX_bl ~ .), arguments used in the glm() (help(glm)) such as family = "binomial" means that we use glm() for logistic regression model; 2) interpretation of the results, including the significant predictors, p-values, t-tests, and R-squares, etc.
# Step 4 -> use step() to automatically delete all the insignificant variables
# Automatic model selection
logit.AD.reduced <- step(logit.AD.full, direction="both", trace = 0) # 1) direction="backward" was used in the example of linear regression model; here, we use  direction="both", which means we start with the full model, then sequentially both remove insignificant variables and also recruits new variables (from the ones that have been removed previously - why? remember that a variable is significant depends on what are other variables on the model already). 2) trace = 0 is to disable the presentation of showing all the models that have been evaluated along the process. If you want to see the process, simply set trace = 1 or not specify this argument (by default, trace = 1 in the function step()..)
anova(logit.AD.reduced,logit.AD.full,test = "LRT") # anova(model1,model2) is to compare if the two models, model1 and model2, are statistically different. If not statistically different, we prefer the simpler model. The argument, test = "LRT", means that a p-value will be reported via the Likelihood Ratio Test (LRT). In this example, p-value is 0.7794, indicates that the two models are not statistically different - which means the reduced model does the same good job as the full model
summary(logit.AD.reduced)
# Step 5 -> test the significance of the logistic model
# Test residual deviance for lack-of-fit (if > 0.10, little-to-no lack-of-fit)
dev.p.val <- 1 - pchisq(logit.AD.reduced$deviance, logit.AD.reduced$df.residual) # 1) The argument logit.AD.reduced$deviance is a similar idea as residual in regression model; 2) logit.AD.reduced$df.residual is the degree of freedom (df) of this deviance. 3) Providing these two arguments to pchisq (chi-square distribution), which calculates the left hand side of the area under the curve, 1 - pchisq gives you the right hand side of the area under the curve - the p-value
dev.p.val
# Step 6 -> Predict using your logistic regession model
y_hat <- predict(logit.AD.reduced, data.test) # a few comments: 1) predict() is a function that you can find in many R pacakges. R package developers tend to agree to write such a function predict(obj, data), where obj is the obj of the created model by that package, and data is the data points you want to predict on. 2) While in many cases this is not needed, sometimes you do need to specify the argument "type". Here, type = c("link", "response", "terms"). We use the default, type = "link", which means, y_hat are the values from the linear equation part of the logistic regression model. Indeed, in this way, y_hat are the intermediate values. Supposely, in this option, 0 is a cut-off value (only by default, not optimal though), i.e., if y_hat < 0, we name it as one class, and if y_hat > 0, it is another class.
# Step 7 -> Evaluate the prediction performance of your logistic regression model
# (1) Three main metrics for classification: Accuracy, Sensitivity (1- False Positive), Specificity (1 - False Negative)
y_hat2 <- y_hat
y_hat2[which(y_hat > 0)] = "c1" # Since y_hat here is the values from the linear equation part of the logistic regression model, by default, we should use 0 as a cut-off value (only by default, not optimal though), i.e., if y_hat < 0, we name it as one class, and if y_hat > 0, it is another class.
y_hat2[which(y_hat < 0)] = "c0"
library(caret) # confusionMatrix() in the package "caret" is a powerful function to summerize the prediction performance of a classification model, reporting metrics such as Accuracy, Sensitivity (1- False Positive), Specificity (1 - False Negative), to name a few.
install.packages(c("caret","pROC"))
# Step 7 -> Evaluate the prediction performance of your logistic regression model
# (1) Three main metrics for classification: Accuracy, Sensitivity (1- False Positive), Specificity (1 - False Negative)
y_hat2 <- y_hat
y_hat2[which(y_hat > 0)] = "c1" # Since y_hat here is the values from the linear equation part of the logistic regression model, by default, we should use 0 as a cut-off value (only by default, not optimal though), i.e., if y_hat < 0, we name it as one class, and if y_hat > 0, it is another class.
y_hat2[which(y_hat < 0)] = "c0"
library(caret) # confusionMatrix() in the package "caret" is a powerful function to summerize the prediction performance of a classification model, reporting metrics such as Accuracy, Sensitivity (1- False Positive), Specificity (1 - False Negative), to name a few.
#confusionMatrix(y_hat2, data.test$DX_bl)
err.logit <- length(which(y_hat2 != data.test$DX_bl))/length(y_hat2)
# (2) ROC curve is another commonly reported metric for classification models
library(pROC) # pROC has the roc() function that is very useful here
plot(roc(data.test$DX_bl, y_hat), col="green", main="ROC Curve")
LB_HW4$coefficients
LB_HW4$coefficients$Intercept
LB_HW4$coefficients$(Intercept)
#Seperate the data into two half, one as training set, another as testing set.
train.ix <- sample(nrow(survey), floor(nrow(survey)/2))
survey.train <- survey[train.ix,]
survey.test <- survey[-train.ix,]
#Put variables in Regression Model, use training set to train the model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + ShareRide + ShareHouse, data = survey.train)
summary(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
vif(LB_HW4)
vif(LB_HW4)
par(mfrow = c(2, 2))
plot(LB_HW4)
predict.lm <- predict(LB_HW4, survey.test)
cor(predict.lm, survey.test$CommuteTime)
test_Lyft <- survey %>% drop_na(survey$What.is.your.primary.reason.for.using.an.Uber.Lyft.)
nrow(test_Lyft)
sum(test_Lyft$What.is.your.primary.reason.for.using.an.Uber.Lyft. == 'Convenience')
137/214
test_Lyft <- survey %>% filter(survey$What.is.your.primary.reason.for.using.an.Uber.Lyft. == 'Convenience')
nrow(test_Lyft)
average(test_Lyft$CommuteTime)
mean(test_Lyft$CommuteTime)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(LyftUber = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, LyftUber)
mean(survey$CommuteTime)
mean(LB_HW4$residuals)
var(LB_HW4$residuals)
cov(LB_HW4$residuals)
cov(LB_HW4$residuals, LB_HW4$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(car)
library(xtable)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(LyftUber = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, LyftUber)
#Transform the variables into the way I wnat to put in my regression model.
#Traffics = Yes means primary means of commute is either buses or driving. Otherwise, no.
#Frequency = High means go on UW campus at least 5 days a week. Otherwise, low.
#LyftUber = Yes means taking Lyft/Uber at least once a week on average. Otherwise, no.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), LyftUber = ifelse(survey$LyftUber > 0, "Yes", "No"), CommuteTimeSqrt = CommuteTime^0.5, AgeSq = Age^2)
#Seperate the data into two half, one as training set, another as testing set.
train.ix <- sample(nrow(survey), floor(nrow(survey)/2))
survey.train <- survey[train.ix,]
survey.test <- survey[-train.ix,]
#Put variables in Regression Model, use training set to train the model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + LyftUber + ShareHouse, data = survey.train)
#summary(LB_HW4)
xtable(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
vif(LB_HW4)
mean(LB_HW4$residuals)
par(mfrow = c(2, 2))
plot(LB_HW4)
predict.lm <- predict(LB_HW4, survey.test)
cor(predict.lm, survey.test$CommuteTime)
table(LB_HW4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(car)
library(xtable)
survey <- read.csv("Class_Survey_W20.csv", header = TRUE)
#Rename column names of the variables that I will use in this regression model.
survey <- survey %>%
rename(Age = How.old.are.you., Who = Are.you., Tmode = What.is.your.primary.means.of.transportation.to.and.from.the.U..Washington., CommuteTime = On.average..how.many.minutes.does.it.take.you.to.get.to.the.U..Washington.from.your.home.) %>%
rename(Transportation = Please.indicate.how.much.you.agree.or.disagree.with.the.following.statements...Seattle.public.transportation.is.reliable.,  Days = In.an.average.week..how.many.days.are.you.on.the.UW.campus., Gender = Are.you..1) %>%
rename(LyftUber = On.average..how.many.days.in.a.week..out.of.7.days..do.you.use.Uber.Lyft.or.other.ride.hailing.apps., ShareHouse = Do.you.live.with.a.significant.other.or.other.family.members.)
#Filter the dataset to clear out missing and meaningless data.
#ShareHouse = Yes means living with significant other or other family members. Otherwise, no.
survey <- survey %>% filter(Age >= 0, CommuteTime >= 0, Who == 'Student', ShareHouse %in% c('Yes', 'No')) %>% drop_na(Who, Tmode, Transportation, Days, LyftUber)
#Transform the variables into the way I wnat to put in my regression model.
#Traffics = Yes means primary means of commute is either buses or driving. Otherwise, no.
#Frequency = High means go on UW campus at least 5 days a week. Otherwise, low.
#LyftUber = Yes means taking Lyft/Uber at least once a week on average. Otherwise, no.
survey <- survey %>%
mutate(Traffics = ifelse((grepl('Bus', survey$Tmode) | grepl('Drive', survey$Tmode)) , "Yes", "No"), AgeSq = Age^2, Frequency = ifelse(grepl('Every', survey$Days), "High", "Low"), LyftUber = ifelse(survey$LyftUber > 0, "Yes", "No"), CommuteTimeSqrt = CommuteTime^0.5, AgeSq = Age^2)
#Seperate the data into two half, one as training set, another as testing set.
train.ix <- sample(nrow(survey), floor(nrow(survey)/2))
survey.train <- survey[train.ix,]
survey.test <- survey[-train.ix,]
#Put variables in Regression Model, use training set to train the model.
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + Frequency + LyftUber + ShareHouse, data = survey.train)
summary(LB_HW4)
plot_model(LB_HW4)
confint(LB_HW4)
vif(LB_HW4)
mean(LB_HW4$residuals)
par(mfrow = c(2, 2))
plot(LB_HW4)
predict.lm <- predict(LB_HW4, survey.test)
cor(predict.lm, survey.test$CommuteTime)
LB_HW4 <- lm(CommuteTimeSqrt ~ Age + Traffics + LyftUber + ShareHouse, data = survey.train)
summary(LB_HW4)
survey <- relevel(survey$Frequency, ref = "Low")
